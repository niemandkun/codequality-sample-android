apply plugin: "checkstyle"
apply plugin: "findbugs"
apply plugin: "jacoco"
apply plugin: "pmd"

jacoco {
    toolVersion = "0.8.1"
}

checkstyle {
    toolVersion = "8.9"
}

pmd {
    toolVersion = "5.6.1"
}

findbugs {
    toolVersion = "3.0.1"
}

task checkstyle(type: Checkstyle) {
    description = "Check code standard"
    group = "verification"
    configFile = file("$project.projectDir/rules/checkstyle.xml")
    source = fileTree("src/main/java")
    include "**/*.java"
    exclude "**/gen/**"

    classpath = files()
    showViolations = true

    reports {
        xml.enabled = true
        html.enabled = true
        html.destination = file("$project.buildDir/reports/checkstyle/checkstyle.html")
    }
}

task findbugs(type: FindBugs) {
    description = "Find bugs mainly design flaws, bad practices, multithreaded correctness and code vulnerabilities."
    group = "verification"
    excludeFilter = file("$project.projectDir/rules/findbugs.xml")
    classes = fileTree("$project.buildDir/intermediates/classes/debug/")
    source = fileTree("src/main/java")
    effort = "max"
    reportLevel = "high"
    classpath = files()

    reports {
        xml.enabled = false
        html.enabled = true
        html.destination = file("$project.buildDir/reports/findbugs/findbugs.html")
    }
}

task pmd(type: Pmd) {
    description = "Identifying potential problems mainly dead code, duplicated code, cyclomatic complexity and overcomplicated expressions"
    group = "verification"
    ruleSetFiles = files("$project.projectDir/rules/pmd.xml")
    source = fileTree("src/main/java")
    include "**/*.java"
    exclude "**/gen/**"

    reports {
        xml.enabled = false
        html.enabled = true
        html.destination = file("$project.buildDir/reports/pmd/pmd.html")
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

task codequalityReport(dependsOn: ["checkstyle", "findbugs", "pmd", "jacocoTestReport"])